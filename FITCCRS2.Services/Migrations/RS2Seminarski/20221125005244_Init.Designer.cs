// <auto-generated />
using System;
using FITCCRS2.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FITCCRS2.Services.Migrations.RS2Seminarski
{
    [DbContext(typeof(RS2SeminarskiContext))]
    [Migration("20221125005244_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Agendum", b =>
                {
                    b.Property<int>("AgendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgendaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgendaId"), 1L, 1);

                    b.Property<int?>("Dan")
                        .HasColumnType("int");

                    b.Property<int?>("TakmicenjeId")
                        .HasColumnType("int")
                        .HasColumnName("TakmicenjeID");

                    b.HasKey("AgendaId");

                    b.HasIndex("TakmicenjeId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ApiResources_Name")
                        .IsUnique();

                    b.ToTable("ApiResources");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceClaims_ApiResourceId");

                    b.ToTable("ApiResourceClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceProperties_ApiResourceId");

                    b.ToTable("ApiResourceProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceScopes_ApiResourceId");

                    b.ToTable("ApiResourceScopes");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceSecrets_ApiResourceId");

                    b.ToTable("ApiResourceSecrets");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ApiScopes_Name")
                        .IsUnique();

                    b.ToTable("ApiScopes");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScopeId" }, "IX_ApiScopeClaims_ScopeId");

                    b.ToTable("ApiScopeClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScopeProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScopeId" }, "IX_ApiScopeProperties_ScopeId");

                    b.ToTable("ApiScopeProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("int");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("int");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("bit");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCodeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_Clients_ClientId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientClaims_ClientId");

                    b.ToTable("ClientClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientCorsOrigins_ClientId");

                    b.ToTable("ClientCorsOrigins");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientGrantTypes_ClientId");

                    b.ToTable("ClientGrantTypes");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientIdPrestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientIdPRestrictions_ClientId");

                    b.ToTable("ClientIdPRestrictions", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("PostLogoutRedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientPostLogoutRedirectUris_ClientId");

                    b.ToTable("ClientPostLogoutRedirectUris");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientProperties_ClientId");

                    b.ToTable("ClientProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientRedirectUris_ClientId");

                    b.ToTable("ClientRedirectUris");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientScopes_ClientId");

                    b.ToTable("ClientScopes");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientSecrets_ClientId");

                    b.ToTable("ClientSecrets");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.DeviceCode", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DeviceCode");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex(new[] { "DeviceCode1" }, "IX_DeviceCodes_DeviceCode")
                        .IsUnique();

                    b.HasIndex(new[] { "Expiration" }, "IX_DeviceCodes_Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Dogadjaj", b =>
                {
                    b.Property<int>("DogadjajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DogadjajID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DogadjajId"), 1L, 1);

                    b.Property<int?>("AgendaId")
                        .HasColumnType("int")
                        .HasColumnName("AgendaID");

                    b.Property<DateTime?>("Kraj")
                        .HasColumnType("datetime");

                    b.Property<string>("Lokacija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Napomena")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Pocetak")
                        .HasColumnType("datetime");

                    b.Property<int?>("Trajanje")
                        .HasColumnType("int");

                    b.HasKey("DogadjajId");

                    b.HasIndex("AgendaId");

                    b.ToTable("Dogadjaj", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_IdentityResources_Name")
                        .IsUnique();

                    b.ToTable("IdentityResources");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdentityResourceId" }, "IX_IdentityResourceClaims_IdentityResourceId");

                    b.ToTable("IdentityResourceClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdentityResourceId" }, "IX_IdentityResourceProperties_IdentityResourceId");

                    b.ToTable("IdentityResourceProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaId"), 1L, 1);

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TakmicenjeId")
                        .HasColumnType("int")
                        .HasColumnName("TakmicenjeID");

                    b.HasKey("KategorijaId");

                    b.HasIndex("TakmicenjeId");

                    b.ToTable("Kategorija", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kriterij", b =>
                {
                    b.Property<int>("KriterijId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KriterijID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KriterijId"), 1L, 1);

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Vrijednost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("KriterijId");

                    b.HasIndex("KategorijaId");

                    b.ToTable("Kriterij", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex(new[] { "Expiration" }, "IX_PersistedGrants_Expiration");

                    b.HasIndex(new[] { "SubjectId", "ClientId", "Type" }, "IX_PersistedGrants_SubjectId_ClientId_Type");

                    b.HasIndex(new[] { "SubjectId", "SessionId", "Type" }, "IX_PersistedGrants_SubjectId_SessionId_Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Predavac", b =>
                {
                    b.Property<int>("PredavacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredavacId"), 1L, 1);

                    b.Property<int?>("DogadjaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("Prezime")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("Ustanova")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zvanje")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PredavacId");

                    b.ToTable("Predavac", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Projekat", b =>
                {
                    b.Property<int>("ProjekatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjekatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjekatId"), 1L, 1);

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TimId")
                        .HasColumnType("int")
                        .HasColumnName("TimID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjekatId");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("TimId");

                    b.ToTable("Projekat", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Rezultat", b =>
                {
                    b.Property<int>("RezultatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RezultatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezultatId"), 1L, 1);

                    b.Property<int?>("Bod")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ProjekatId")
                        .HasColumnType("int")
                        .HasColumnName("ProjekatID");

                    b.HasKey("RezultatId");

                    b.HasIndex("ProjekatId");

                    b.ToTable("Rezultat", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Sponzor", b =>
                {
                    b.Property<int>("SponzorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SponzorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SponzorId"), 1L, 1);

                    b.Property<int?>("Godina")
                        .HasColumnType("int");

                    b.Property<double?>("Iznos")
                        .HasColumnType("float");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SponzorKategorije")
                        .HasColumnType("bit");

                    b.Property<string>("TipSponzorstva")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SponzorId");

                    b.HasIndex("KategorijaId");

                    b.ToTable("Sponzor", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Takmicenje", b =>
                {
                    b.Property<int>("TakmicenjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TakmicenjeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TakmicenjeId"), 1L, 1);

                    b.Property<int?>("BrojDana")
                        .HasColumnType("int");

                    b.Property<int?>("Godina")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Kraj")
                        .HasColumnType("datetime");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Pocetak")
                        .HasColumnType("datetime");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TakmicenjeId");

                    b.ToTable("Takmicenje", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Tim", b =>
                {
                    b.Property<int>("TimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimId"), 1L, 1);

                    b.Property<int?>("BrojClanova")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TakmicenjeId")
                        .HasColumnType("int")
                        .HasColumnName("TakmicenjeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimId");

                    b.HasIndex("TakmicenjeId");

                    b.ToTable("Tim", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<bool?>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PredavacDogadjaj", b =>
                {
                    b.Property<int>("PredavacId")
                        .HasColumnType("int");

                    b.Property<int>("DogadjaId")
                        .HasColumnType("int");

                    b.HasKey("PredavacId", "DogadjaId");

                    b.HasIndex("DogadjaId");

                    b.ToTable("PredavacDogadjaj", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Agendum", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Takmicenje", "Takmicenje")
                        .WithMany("Agenda")
                        .HasForeignKey("TakmicenjeId")
                        .HasConstraintName("FK_Agenda_Takmicenje");

                    b.Navigation("Takmicenje");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceProperty", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceProperties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceScope", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceScopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceSecret", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceSecrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScopeClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiScope", "Scope")
                        .WithMany("ApiScopeClaims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScopeProperty", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiScope", "Scope")
                        .WithMany("ApiScopeProperties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetRoleClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserLogin", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserToken", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientClaims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientCorsOrigin", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientGrantType", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientIdPrestriction", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientIdPrestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientPostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientProperty", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientProperties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientRedirectUri", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientScope", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientSecret", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Dogadjaj", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Agendum", "Agenda")
                        .WithMany("Dogadjajs")
                        .HasForeignKey("AgendaId")
                        .HasConstraintName("FK_Dogadjaj_Agenda");

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResourceClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResourceProperty", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceProperties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kategorija", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Takmicenje", "Takmicenje")
                        .WithMany("Kategorijas")
                        .HasForeignKey("TakmicenjeId")
                        .HasConstraintName("FK_Kategorija_Takmicenje");

                    b.Navigation("Takmicenje");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kriterij", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Kriterijs")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK_Kriterij_Kategorija");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Projekat", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Projekats")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK_Projekat_Kategorija");

                    b.HasOne("FITCCRS2.Services.Database.Tim", "Tim")
                        .WithMany("Projekats")
                        .HasForeignKey("TimId")
                        .HasConstraintName("FK_Projekat_Tim");

                    b.Navigation("Kategorija");

                    b.Navigation("Tim");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Rezultat", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Projekat", "Projekat")
                        .WithMany("Rezultats")
                        .HasForeignKey("ProjekatId")
                        .HasConstraintName("FK_Rezultat_Projekat");

                    b.Navigation("Projekat");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Sponzor", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Sponzors")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK_Sponzor_Kategorija");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Tim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Takmicenje", "Takmicenje")
                        .WithMany("Tims")
                        .HasForeignKey("TakmicenjeId")
                        .HasConstraintName("FK_Tim_Takmicenje");

                    b.Navigation("Takmicenje");
                });

            modelBuilder.Entity("PredavacDogadjaj", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Dogadjaj", null)
                        .WithMany()
                        .HasForeignKey("DogadjaId")
                        .IsRequired()
                        .HasConstraintName("FK_PredavacDogadjaj_Dogadjaj");

                    b.HasOne("FITCCRS2.Services.Database.Predavac", null)
                        .WithMany()
                        .HasForeignKey("PredavacId")
                        .IsRequired()
                        .HasConstraintName("FK_PredavacDogadjaj_Predavac");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Agendum", b =>
                {
                    b.Navigation("Dogadjajs");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResource", b =>
                {
                    b.Navigation("ApiResourceClaims");

                    b.Navigation("ApiResourceProperties");

                    b.Navigation("ApiResourceScopes");

                    b.Navigation("ApiResourceSecrets");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScope", b =>
                {
                    b.Navigation("ApiScopeClaims");

                    b.Navigation("ApiScopeProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Client", b =>
                {
                    b.Navigation("ClientClaims");

                    b.Navigation("ClientCorsOrigins");

                    b.Navigation("ClientGrantTypes");

                    b.Navigation("ClientIdPrestrictions");

                    b.Navigation("ClientPostLogoutRedirectUris");

                    b.Navigation("ClientProperties");

                    b.Navigation("ClientRedirectUris");

                    b.Navigation("ClientScopes");

                    b.Navigation("ClientSecrets");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResource", b =>
                {
                    b.Navigation("IdentityResourceClaims");

                    b.Navigation("IdentityResourceProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kategorija", b =>
                {
                    b.Navigation("Kriterijs");

                    b.Navigation("Projekats");

                    b.Navigation("Sponzors");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Projekat", b =>
                {
                    b.Navigation("Rezultats");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Takmicenje", b =>
                {
                    b.Navigation("Agenda");

                    b.Navigation("Kategorijas");

                    b.Navigation("Tims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Tim", b =>
                {
                    b.Navigation("Projekats");
                });
#pragma warning restore 612, 618
        }
    }
}
