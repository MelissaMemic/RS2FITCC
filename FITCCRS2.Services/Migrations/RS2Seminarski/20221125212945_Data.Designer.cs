// <auto-generated />
using System;
using FITCCRS2.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FITCCRS2.Services.Migrations.RS2Seminarski
{
    [DbContext(typeof(RS2SeminarskiContext))]
    [Migration("20221125212945_Data")]
    partial class Data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AspNetRoleAspNetUser");
                });

            modelBuilder.Entity("DogadjajPredavac", b =>
                {
                    b.Property<int>("DogadjasDogadjajId")
                        .HasColumnType("int");

                    b.Property<int>("PredavacsPredavacId")
                        .HasColumnType("int");

                    b.HasKey("DogadjasDogadjajId", "PredavacsPredavacId");

                    b.HasIndex("PredavacsPredavacId");

                    b.ToTable("DogadjajPredavac");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Agendum", b =>
                {
                    b.Property<int>("AgendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgendaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgendaId"), 1L, 1);

                    b.Property<int?>("Dan")
                        .HasColumnType("int");

                    b.Property<int?>("TakmicenjeId")
                        .HasColumnType("int")
                        .HasColumnName("TakmicenjeID");

                    b.HasKey("AgendaId");

                    b.HasIndex("TakmicenjeId");

                    b.ToTable("Agenda");

                    b.HasData(
                        new
                        {
                            AgendaId = 1,
                            Dan = 1,
                            TakmicenjeId = 1
                        },
                        new
                        {
                            AgendaId = 2,
                            Dan = 2,
                            TakmicenjeId = 1
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ApiResources_Name")
                        .IsUnique();

                    b.ToTable("ApiResources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 35, DateTimeKind.Local).AddTicks(9599),
                            DisplayName = "FITCCRS2",
                            Enabled = true,
                            Name = "FITCCRS2",
                            NonEditable = false,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceClaims_ApiResourceId");

                    b.ToTable("ApiResourceClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiResourceId = 1,
                            Type = "role"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceProperties_ApiResourceId");

                    b.ToTable("ApiResourceProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceScopes_ApiResourceId");

                    b.ToTable("ApiResourceScopes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiResourceId = 1,
                            Scope = "FITCCRS2.read"
                        },
                        new
                        {
                            Id = 2,
                            ApiResourceId = 1,
                            Scope = "FITCCRS2.write"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceSecrets_ApiResourceId");

                    b.ToTable("ApiResourceSecrets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiResourceId = 1,
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 35, DateTimeKind.Local).AddTicks(9823),
                            Type = "SharedSecret",
                            Value = "DbsYVAAscQ1HaJn5nUwONjP7UzJJclRpWGn/GKOKSw8="
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ApiScopes_Name")
                        .IsUnique();

                    b.ToTable("ApiScopes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "FITCCRS2.read",
                            Emphasize = false,
                            Enabled = true,
                            Name = "FITCCRS2.read",
                            Required = false,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "FITCCRS2.write",
                            Emphasize = false,
                            Enabled = true,
                            Name = "FITCCRS2.write",
                            Required = false,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScopeId" }, "IX_ApiScopeClaims_ScopeId");

                    b.ToTable("ApiScopeClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScopeProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScopeId" }, "IX_ApiScopeProperties_ScopeId");

                    b.ToTable("ApiScopeProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "37d3d51d-ca09-45ff-b3b1-111b548c3db7",
                            ConcurrencyStamp = "582faf8e-eb53-4f12-a597-e8dc349010d9",
                            Name = "takmicar",
                            NormalizedName = "TAKMICAR"
                        },
                        new
                        {
                            Id = "5963d28a-f188-4aa4-b863-910d91022e1d",
                            ConcurrencyStamp = "0dc2bd01-8e63-4d1b-b6fd-e4b750d64463",
                            Name = "sponzor",
                            NormalizedName = "SPONZOR"
                        },
                        new
                        {
                            Id = "94c2ed89-8d43-420f-be46-a770a3c483f0",
                            ConcurrencyStamp = "ff459d69-5e90-4397-8ebd-86984f218e1c",
                            Name = "ziri",
                            NormalizedName = "ZIRI"
                        },
                        new
                        {
                            Id = "e6d3c95c-3fd1-43c0-b764-3e074b086963",
                            ConcurrencyStamp = "a7f6affb-f83d-46f1-b8f6-3be28d990b4c",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ed46d55f-5819-4435-9bed-745d9a138cac",
                            ConcurrencyStamp = "fe164d12-d17a-4b67-be8d-c48ed577f90d",
                            Name = "predavac",
                            NormalizedName = "PREDAVAC"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "090bdbbc-926a-41f6-9573-a48ba9f64303",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbb68c5b-3dae-4106-a2d6-62a4c1be35e9",
                            Email = "mellimostar@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MELLIMOSTAR@GMAIL.COM",
                            NormalizedUserName = "MELI",
                            PasswordHash = "AQAAAAEAACcQAAAAENRCLecZkCvoTWVxS7oZR1j+bFCIgDw4L7dqdpCTK/sE67Ai/4nW9zI24Ot75D1UVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "H7K7Q3VFIDZ36LXORHOX5NIEOCUCNBNB",
                            TwoFactorEnabled = false,
                            UserName = "meli"
                        },
                        new
                        {
                            Id = "f16b92c8-c7d6-486e-9635-9103263eed30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80afc46a-3055-476e-8c2a-294f90f72afa",
                            Email = "lamija.babovic@edu.fit.ba",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "LAMIJA.BABOVIC@EDU.FIT.BA",
                            NormalizedUserName = "LAMIJA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJjk/A6GZEi1sMeNfQz6BSfAoYMQHbha61zcKwboANM2UAy7nspzn7NMQ/m4MBhgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "N3ELBRQMOT6K6U6HJCF5324JMXWPSS57",
                            TwoFactorEnabled = false,
                            UserName = "lamija"
                        },
                        new
                        {
                            Id = "4668c178-3b13-4876-b305-608b1c41548f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84a598f8-bc6e-4ece-bfe7-d5aa71cf1995",
                            Email = "ziri@ziri.ba",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ZIRI@ZIRI.BA",
                            NormalizedUserName = "ZIRI",
                            PasswordHash = "AQAAAAEAACcQAAAAEEg2oudD+BP4sB+ORU7mfyJpuSQ/woVogn8bj3P1JP4BAOVIPKOx7dUrdsdK0yxnmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2BEJCF6VFEDLX4ABGLYTYWXCYU37RPHB",
                            TwoFactorEnabled = false,
                            UserName = "ziri"
                        },
                        new
                        {
                            Id = "2adbed90-e3d3-4786-9115-241e02cf5c96",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e142fa65-04f0-4fc2-b971-1e731caca934",
                            Email = "bablamija@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "BABLAMIJA@GMAIL.COM",
                            NormalizedUserName = "BABLAMIJA",
                            PasswordHash = "AQAAAAEAACcQAAAAED4Q8lm8HuZKCoxF5hbQe/Q0dZRlEn0yCUCFnZXFx2GZLjhEd9VCW3ezjkd6BeBymw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BOSLSMZK63NKAXROUVKFEAUMQJV6KJPK",
                            TwoFactorEnabled = false,
                            UserName = "bablamija"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "name",
                            ClaimValue = "Melissa Memic",
                            UserId = "090bdbbc-926a-41f6-9573-a48ba9f64303"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "given_name",
                            ClaimValue = "Melissa",
                            UserId = "090bdbbc-926a-41f6-9573-a48ba9f64303"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "family_name",
                            ClaimValue = "Memic",
                            UserId = "090bdbbc-926a-41f6-9573-a48ba9f64303"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "website",
                            ClaimValue = "http://google.com",
                            UserId = "090bdbbc-926a-41f6-9573-a48ba9f64303"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "name",
                            ClaimValue = "Lamija Babovic",
                            UserId = "f16b92c8-c7d6-486e-9635-9103263eed30"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "given_name",
                            ClaimValue = "Lamija",
                            UserId = "f16b92c8-c7d6-486e-9635-9103263eed30"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "family_name",
                            ClaimValue = "Babovic",
                            UserId = "f16b92c8-c7d6-486e-9635-9103263eed30"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "website",
                            ClaimValue = "http://google.com",
                            UserId = "f16b92c8-c7d6-486e-9635-9103263eed30"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "name",
                            ClaimValue = "Ziri",
                            UserId = "4668c178-3b13-4876-b305-608b1c41548f"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "given_name",
                            ClaimValue = "Ziri",
                            UserId = "4668c178-3b13-4876-b305-608b1c41548f"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "family_name",
                            ClaimValue = "Ziri",
                            UserId = "4668c178-3b13-4876-b305-608b1c41548f"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "website",
                            ClaimValue = "http://google.com",
                            UserId = "4668c178-3b13-4876-b305-608b1c41548f"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "name",
                            ClaimValue = "Lamija Bab",
                            UserId = "2adbed90-e3d3-4786-9115-241e02cf5c96"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "given_name",
                            ClaimValue = "Lamija",
                            UserId = "2adbed90-e3d3-4786-9115-241e02cf5c96"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "family_name",
                            ClaimValue = "Bab",
                            UserId = "2adbed90-e3d3-4786-9115-241e02cf5c96"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "website",
                            ClaimValue = "https://github.com/LamijaBabovic",
                            UserId = "2adbed90-e3d3-4786-9115-241e02cf5c96"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRole_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserRole_UserId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "090bdbbc-926a-41f6-9573-a48ba9f64303",
                            RoleId = "e6d3c95c-3fd1-43c0-b764-3e074b086963"
                        },
                        new
                        {
                            UserId = "f16b92c8-c7d6-486e-9635-9103263eed30",
                            RoleId = "e6d3c95c-3fd1-43c0-b764-3e074b086963"
                        },
                        new
                        {
                            UserId = "4668c178-3b13-4876-b305-608b1c41548f",
                            RoleId = "94c2ed89-8d43-420f-be46-a770a3c483f0"
                        },
                        new
                        {
                            UserId = "2adbed90-e3d3-4786-9115-241e02cf5c96",
                            RoleId = "37d3d51d-ca09-45ff-b3b1-111b548c3db7"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("int");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("int");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("bit");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCodeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_Clients_ClientId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbsoluteRefreshTokenLifetime = 2592000,
                            AccessTokenLifetime = 3600,
                            AccessTokenType = 0,
                            AllowAccessTokensViaBrowser = false,
                            AllowOfflineAccess = false,
                            AllowPlainTextPkce = false,
                            AllowRememberConsent = true,
                            AlwaysIncludeUserClaimsInIdToken = false,
                            AlwaysSendClientClaims = false,
                            AuthorizationCodeLifetime = 300,
                            BackChannelLogoutSessionRequired = true,
                            ClientClaimsPrefix = "client_",
                            ClientId = "m2m.client",
                            ClientName = "Client Credentials Client",
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 35, DateTimeKind.Local).AddTicks(9893),
                            DeviceCodeLifetime = 300,
                            EnableLocalLogin = true,
                            Enabled = true,
                            FrontChannelLogoutSessionRequired = true,
                            IdentityTokenLifetime = 300,
                            IncludeJwtId = true,
                            NonEditable = false,
                            ProtocolType = "oidc",
                            RefreshTokenExpiration = 1,
                            RefreshTokenUsage = 1,
                            RequireClientSecret = true,
                            RequireConsent = false,
                            RequirePkce = true,
                            RequireRequestObject = false,
                            SlidingRefreshTokenLifetime = 1296000,
                            UpdateAccessTokenClaimsOnRefresh = false
                        },
                        new
                        {
                            Id = 2,
                            AbsoluteRefreshTokenLifetime = 2592000,
                            AccessTokenLifetime = 3600,
                            AccessTokenType = 0,
                            AllowAccessTokensViaBrowser = false,
                            AllowOfflineAccess = true,
                            AllowPlainTextPkce = false,
                            AllowRememberConsent = true,
                            AlwaysIncludeUserClaimsInIdToken = false,
                            AlwaysSendClientClaims = false,
                            AuthorizationCodeLifetime = 300,
                            BackChannelLogoutSessionRequired = true,
                            ClientClaimsPrefix = "client_",
                            ClientId = "interactive",
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 35, DateTimeKind.Local).AddTicks(9932),
                            DeviceCodeLifetime = 300,
                            EnableLocalLogin = true,
                            Enabled = true,
                            FrontChannelLogoutSessionRequired = true,
                            FrontChannelLogoutUri = "https://localhost:5444/signout-oidc",
                            IdentityTokenLifetime = 300,
                            IncludeJwtId = true,
                            NonEditable = false,
                            ProtocolType = "oidc",
                            RefreshTokenExpiration = 1,
                            RefreshTokenUsage = 1,
                            RequireClientSecret = true,
                            RequireConsent = true,
                            RequirePkce = true,
                            RequireRequestObject = false,
                            SlidingRefreshTokenLifetime = 1296000,
                            UpdateAccessTokenClaimsOnRefresh = false
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientClaims_ClientId");

                    b.ToTable("ClientClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientCorsOrigins_ClientId");

                    b.ToTable("ClientCorsOrigins");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientGrantTypes_ClientId");

                    b.ToTable("ClientGrantTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            GrantType = "client_credentials"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            GrantType = "authorization_code"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientIdPrestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientIdPRestrictions_ClientId");

                    b.ToTable("ClientIdPRestrictions", (string)null);
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("PostLogoutRedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientPostLogoutRedirectUris_ClientId");

                    b.ToTable("ClientPostLogoutRedirectUris");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 2,
                            PostLogoutRedirectUri = "https://localhost:5000/signout-callback-oidc"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientProperties_ClientId");

                    b.ToTable("ClientProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientRedirectUris_ClientId");

                    b.ToTable("ClientRedirectUris");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 2,
                            RedirectUri = "https://localhost:5000/signin-oidc"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientScopes_ClientId");

                    b.ToTable("ClientScopes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Scope = "FITCCRS2.read"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            Scope = "FITCCRS2.write"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 2,
                            Scope = "openid"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 2,
                            Scope = "profile"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 2,
                            Scope = "FITCCRS2.read"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientSecrets_ClientId");

                    b.ToTable("ClientSecrets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 36, DateTimeKind.Local).AddTicks(30),
                            Type = "SharedSecret",
                            Value = "mvcbFoR2Z9+D9UMKjmSJ3rngEopZ+G/oaH+EafS3BLo="
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 36, DateTimeKind.Local).AddTicks(43),
                            Type = "SharedSecret",
                            Value = "mvcbFoR2Z9+D9UMKjmSJ3rngEopZ+G/oaH+EafS3BLo="
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.DeviceCode", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DeviceCode");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex(new[] { "DeviceCode1" }, "IX_DeviceCodes_DeviceCode")
                        .IsUnique();

                    b.HasIndex(new[] { "Expiration" }, "IX_DeviceCodes_Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Dogadjaj", b =>
                {
                    b.Property<int>("DogadjajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DogadjajID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DogadjajId"), 1L, 1);

                    b.Property<int?>("AgendaId")
                        .HasColumnType("int")
                        .HasColumnName("AgendaID");

                    b.Property<DateTime?>("Kraj")
                        .HasColumnType("datetime");

                    b.Property<string>("Lokacija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Napomena")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Pocetak")
                        .HasColumnType("datetime");

                    b.Property<int?>("Trajanje")
                        .HasColumnType("int");

                    b.HasKey("DogadjajId");

                    b.HasIndex("AgendaId");

                    b.ToTable("Dogadjaj", (string)null);

                    b.HasData(
                        new
                        {
                            DogadjajId = 1,
                            AgendaId = 1,
                            Kraj = new DateTime(2022, 5, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Lokacija = "Amfiteatar 1",
                            Naziv = "Otvaranje",
                            Pocetak = new DateTime(2022, 5, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Trajanje = 30
                        },
                        new
                        {
                            DogadjajId = 2,
                            AgendaId = 1,
                            Kraj = new DateTime(2022, 5, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Lokacija = "Amfiteatar 1",
                            Naziv = "Tribine",
                            Pocetak = new DateTime(2022, 5, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Trajanje = 90
                        },
                        new
                        {
                            DogadjajId = 3,
                            AgendaId = 1,
                            Kraj = new DateTime(2022, 5, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Lokacija = "Amfiteatar 3",
                            Naziv = "Inovacije",
                            Pocetak = new DateTime(2022, 5, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Trajanje = 90
                        },
                        new
                        {
                            DogadjajId = 4,
                            AgendaId = 1,
                            Kraj = new DateTime(2022, 5, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Lokacija = "Amfiteatar 2",
                            Naziv = "Programiranja",
                            Pocetak = new DateTime(2022, 5, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Trajanje = 90
                        },
                        new
                        {
                            DogadjajId = 5,
                            AgendaId = 1,
                            Kraj = new DateTime(2022, 5, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Lokacija = "AKS",
                            Naziv = "Programiranja igara",
                            Pocetak = new DateTime(2022, 5, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Trajanje = 90
                        },
                        new
                        {
                            DogadjajId = 6,
                            AgendaId = 2,
                            Kraj = new DateTime(2022, 5, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Lokacija = "Amfiteatar 1",
                            Naziv = "Proglasenje pobjednjika",
                            Pocetak = new DateTime(2022, 5, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Trajanje = 90
                        },
                        new
                        {
                            DogadjajId = 7,
                            AgendaId = 2,
                            Kraj = new DateTime(2022, 5, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Lokacija = "Amfiteatar 1",
                            Naziv = "Zatvaranje",
                            Pocetak = new DateTime(2022, 5, 2, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Trajanje = 30
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_IdentityResources_Name")
                        .IsUnique();

                    b.ToTable("IdentityResources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 36, DateTimeKind.Local).AddTicks(95),
                            DisplayName = "Your user identifier",
                            Emphasize = false,
                            Enabled = true,
                            Name = "openid",
                            NonEditable = false,
                            Required = true,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 36, DateTimeKind.Local).AddTicks(111),
                            Description = "Your user profile information (first name, last name, etc.)",
                            DisplayName = "User profile",
                            Emphasize = true,
                            Enabled = true,
                            Name = "profile",
                            NonEditable = false,
                            Required = false,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 11, 25, 22, 29, 44, 36, DateTimeKind.Local).AddTicks(123),
                            Emphasize = false,
                            Enabled = true,
                            Name = "role",
                            NonEditable = false,
                            Required = false,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdentityResourceId" }, "IX_IdentityResourceClaims_IdentityResourceId");

                    b.ToTable("IdentityResourceClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdentityResourceId = 1,
                            Type = "sub"
                        },
                        new
                        {
                            Id = 2,
                            IdentityResourceId = 2,
                            Type = "name"
                        },
                        new
                        {
                            Id = 3,
                            IdentityResourceId = 2,
                            Type = "family_name"
                        },
                        new
                        {
                            Id = 4,
                            IdentityResourceId = 2,
                            Type = "given_name"
                        },
                        new
                        {
                            Id = 5,
                            IdentityResourceId = 2,
                            Type = "middle_name"
                        },
                        new
                        {
                            Id = 6,
                            IdentityResourceId = 2,
                            Type = "nickname"
                        },
                        new
                        {
                            Id = 7,
                            IdentityResourceId = 2,
                            Type = "preferred_username"
                        },
                        new
                        {
                            Id = 8,
                            IdentityResourceId = 2,
                            Type = "profile"
                        },
                        new
                        {
                            Id = 9,
                            IdentityResourceId = 2,
                            Type = "picture"
                        },
                        new
                        {
                            Id = 10,
                            IdentityResourceId = 2,
                            Type = "website"
                        },
                        new
                        {
                            Id = 11,
                            IdentityResourceId = 2,
                            Type = "gender"
                        },
                        new
                        {
                            Id = 12,
                            IdentityResourceId = 2,
                            Type = "birthdate"
                        },
                        new
                        {
                            Id = 13,
                            IdentityResourceId = 2,
                            Type = "zoneinfo"
                        },
                        new
                        {
                            Id = 14,
                            IdentityResourceId = 2,
                            Type = "locale"
                        },
                        new
                        {
                            Id = 15,
                            IdentityResourceId = 2,
                            Type = "updated_at"
                        },
                        new
                        {
                            Id = 16,
                            IdentityResourceId = 3,
                            Type = "role"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdentityResourceId" }, "IX_IdentityResourceProperties_IdentityResourceId");

                    b.ToTable("IdentityResourceProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaId"), 1L, 1);

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TakmicenjeId")
                        .HasColumnType("int")
                        .HasColumnName("TakmicenjeID");

                    b.HasKey("KategorijaId");

                    b.HasIndex("TakmicenjeId");

                    b.ToTable("Kategorija", (string)null);

                    b.HasData(
                        new
                        {
                            KategorijaId = 1,
                            Naziv = "Programiraje",
                            Opis = "Takmicenje u oblasti poznavanja programiranja",
                            TakmicenjeId = 1
                        },
                        new
                        {
                            KategorijaId = 2,
                            Naziv = "Inovacije",
                            Opis = "Kreiranje najinovativnijeg rjesenja",
                            TakmicenjeId = 1
                        },
                        new
                        {
                            KategorijaId = 3,
                            Naziv = "Programiraje igara",
                            Opis = "Takmicenje u oblasti poznavanja programiranja igara",
                            TakmicenjeId = 1
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kriterij", b =>
                {
                    b.Property<int>("KriterijId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KriterijID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KriterijId"), 1L, 1);

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Vrijednost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("KriterijId");

                    b.HasIndex("KategorijaId");

                    b.ToTable("Kriterij", (string)null);

                    b.HasData(
                        new
                        {
                            KriterijId = 1,
                            KategorijaId = 2,
                            Naziv = "Inovativnost",
                            Vrijednost = "50"
                        },
                        new
                        {
                            KriterijId = 2,
                            KategorijaId = 2,
                            Naziv = "Implementacija",
                            Vrijednost = "50"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex(new[] { "Expiration" }, "IX_PersistedGrants_Expiration");

                    b.HasIndex(new[] { "SubjectId", "ClientId", "Type" }, "IX_PersistedGrants_SubjectId_ClientId_Type");

                    b.HasIndex(new[] { "SubjectId", "SessionId", "Type" }, "IX_PersistedGrants_SubjectId_SessionId_Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Predavac", b =>
                {
                    b.Property<int>("PredavacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredavacId"), 1L, 1);

                    b.Property<int?>("DogadjaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("Prezime")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("Ustanova")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zvanje")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PredavacId");

                    b.ToTable("Predavac", (string)null);

                    b.HasData(
                        new
                        {
                            PredavacId = 1,
                            DogadjaId = 2,
                            Email = "neko.ne@nesto.ba",
                            Ime = "Neko",
                            Prezime = "Neko",
                            Ustanova = "Firma",
                            Zvanje = "Software inzenjer"
                        },
                        new
                        {
                            PredavacId = 2,
                            DogadjaId = 2,
                            Email = "neko.dr@nesto.ba",
                            Ime = "Neko",
                            Prezime = "Drugi",
                            Ustanova = "Firma nova",
                            Zvanje = "Software inzenjer"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.PredavacDogadjaj", b =>
                {
                    b.Property<int>("PredavacId")
                        .HasColumnType("int");

                    b.Property<int>("DogadjaId")
                        .HasColumnType("int");

                    b.HasKey("PredavacId", "DogadjaId");

                    b.ToTable("PredavacDogadjaj");

                    b.HasData(
                        new
                        {
                            PredavacId = 1,
                            DogadjaId = 2
                        },
                        new
                        {
                            PredavacId = 2,
                            DogadjaId = 2
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Projekat", b =>
                {
                    b.Property<int>("ProjekatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjekatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjekatId"), 1L, 1);

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TimId")
                        .HasColumnType("int")
                        .HasColumnName("TimID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjekatId");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("TimId");

                    b.ToTable("Projekat", (string)null);

                    b.HasData(
                        new
                        {
                            ProjekatId = 1,
                            KategorijaId = 2,
                            Naziv = "Neki projekat",
                            Opis = "Inovativan projekat. Code dostupan na githubu.",
                            TimId = 1,
                            UserId = 4,
                            Username = "bablamija"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Rezultat", b =>
                {
                    b.Property<int>("RezultatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RezultatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezultatId"), 1L, 1);

                    b.Property<int?>("Bod")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ProjekatId")
                        .HasColumnType("int")
                        .HasColumnName("ProjekatID");

                    b.HasKey("RezultatId");

                    b.HasIndex("ProjekatId");

                    b.ToTable("Rezultat", (string)null);

                    b.HasData(
                        new
                        {
                            RezultatId = 1,
                            Bod = 90,
                            Napomena = "Neka napomena",
                            ProjekatId = 1
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Sponzor", b =>
                {
                    b.Property<int>("SponzorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SponzorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SponzorId"), 1L, 1);

                    b.Property<int?>("Godina")
                        .HasColumnType("int");

                    b.Property<double?>("Iznos")
                        .HasColumnType("float");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SponzorKategorije")
                        .HasColumnType("bit");

                    b.Property<string>("TipSponzorstva")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SponzorId");

                    b.HasIndex("KategorijaId");

                    b.ToTable("Sponzor", (string)null);

                    b.HasData(
                        new
                        {
                            SponzorId = 1,
                            Godina = 2022,
                            Iznos = 5000.0,
                            KategorijaId = 2,
                            Naziv = "Sponzor",
                            SponzorKategorije = true,
                            TipSponzorstva = "Zlatni"
                        },
                        new
                        {
                            SponzorId = 2,
                            Godina = 2022,
                            Iznos = 2500.0,
                            KategorijaId = 0,
                            Naziv = "Sponzor",
                            SponzorKategorije = false,
                            TipSponzorstva = "Srebreni"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Takmicenje", b =>
                {
                    b.Property<int>("TakmicenjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TakmicenjeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TakmicenjeId"), 1L, 1);

                    b.Property<int?>("BrojDana")
                        .HasColumnType("int");

                    b.Property<int?>("Godina")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Kraj")
                        .HasColumnType("datetime");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Pocetak")
                        .HasColumnType("datetime");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TakmicenjeId");

                    b.ToTable("Takmicenje", (string)null);

                    b.HasData(
                        new
                        {
                            TakmicenjeId = 1,
                            BrojDana = 2,
                            Godina = 2022,
                            Kraj = new DateTime(2022, 5, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Naziv = "FIT Coding Challenge 2022",
                            Pocetak = new DateTime(2022, 5, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Slogan = " "
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Tim", b =>
                {
                    b.Property<int>("TimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimId"), 1L, 1);

                    b.Property<int?>("BrojClanova")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TakmicenjeId")
                        .HasColumnType("int")
                        .HasColumnName("TakmicenjeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimId");

                    b.HasIndex("TakmicenjeId");

                    b.ToTable("Tim", (string)null);

                    b.HasData(
                        new
                        {
                            TimId = 1,
                            BrojClanova = 1,
                            Naziv = "Tim",
                            TakmicenjeId = 1,
                            UserId = 4,
                            Username = "bablamija"
                        });
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<bool?>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            IsAllowed = true,
                            Lastname = "Memic",
                            Name = "Melissa",
                            Role = "admin",
                            Username = "meli",
                            Website = "http://google.com"
                        },
                        new
                        {
                            UserId = 2,
                            IsAllowed = true,
                            Lastname = "Babovic",
                            Name = "lamija",
                            Role = "admin",
                            Username = "lamija",
                            Website = "http://google.com"
                        },
                        new
                        {
                            UserId = 3,
                            IsAllowed = true,
                            Lastname = "Ziri",
                            Name = "Ziri",
                            Role = "ziri",
                            Username = "ziri",
                            Website = "http://google.com"
                        },
                        new
                        {
                            UserId = 4,
                            IsAllowed = true,
                            Lastname = "Bab",
                            Name = "lamija",
                            Role = "takmicar",
                            Username = "bablamija",
                            Website = "http://google.com"
                        });
                });

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DogadjajPredavac", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Dogadjaj", null)
                        .WithMany()
                        .HasForeignKey("DogadjasDogadjajId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FITCCRS2.Services.Database.Predavac", null)
                        .WithMany()
                        .HasForeignKey("PredavacsPredavacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Agendum", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Takmicenje", "Takmicenje")
                        .WithMany("Agendums")
                        .HasForeignKey("TakmicenjeId")
                        .HasConstraintName("FK_Agenda_Takmicenje");

                    b.Navigation("Takmicenje");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceProperty", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceProperties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceScope", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceScopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResourceSecret", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceSecrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScopeClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiScope", "Scope")
                        .WithMany("ApiScopeClaims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScopeProperty", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.ApiScope", "Scope")
                        .WithMany("ApiScopeProperties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetRoleClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserLogin", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserRole", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUserToken", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientClaims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientCorsOrigin", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientGrantType", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientIdPrestriction", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientIdPrestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientPostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientProperty", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientProperties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientRedirectUri", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientScope", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ClientSecret", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Dogadjaj", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Agendum", "Agenda")
                        .WithMany("Dogadjajs")
                        .HasForeignKey("AgendaId")
                        .HasConstraintName("FK_Dogadjaj_Agenda");

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResourceClaim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResourceProperty", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceProperties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kategorija", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Takmicenje", "Takmicenje")
                        .WithMany("Kategorijas")
                        .HasForeignKey("TakmicenjeId")
                        .HasConstraintName("FK_Kategorija_Takmicenje");

                    b.Navigation("Takmicenje");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kriterij", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Kriterijs")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK_Kriterij_Kategorija");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Projekat", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Projekats")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK_Projekat_Kategorija");

                    b.HasOne("FITCCRS2.Services.Database.Tim", "Tim")
                        .WithMany("Projekats")
                        .HasForeignKey("TimId")
                        .HasConstraintName("FK_Projekat_Tim");

                    b.Navigation("Kategorija");

                    b.Navigation("Tim");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Rezultat", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Projekat", "Projekat")
                        .WithMany("Rezultats")
                        .HasForeignKey("ProjekatId")
                        .HasConstraintName("FK_Rezultat_Projekat");

                    b.Navigation("Projekat");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Sponzor", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Sponzors")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK_Sponzor_Kategorija");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Tim", b =>
                {
                    b.HasOne("FITCCRS2.Services.Database.Takmicenje", "Takmicenje")
                        .WithMany("Tims")
                        .HasForeignKey("TakmicenjeId")
                        .HasConstraintName("FK_Tim_Takmicenje");

                    b.Navigation("Takmicenje");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Agendum", b =>
                {
                    b.Navigation("Dogadjajs");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiResource", b =>
                {
                    b.Navigation("ApiResourceClaims");

                    b.Navigation("ApiResourceProperties");

                    b.Navigation("ApiResourceScopes");

                    b.Navigation("ApiResourceSecrets");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.ApiScope", b =>
                {
                    b.Navigation("ApiScopeClaims");

                    b.Navigation("ApiScopeProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Client", b =>
                {
                    b.Navigation("ClientClaims");

                    b.Navigation("ClientCorsOrigins");

                    b.Navigation("ClientGrantTypes");

                    b.Navigation("ClientIdPrestrictions");

                    b.Navigation("ClientPostLogoutRedirectUris");

                    b.Navigation("ClientProperties");

                    b.Navigation("ClientRedirectUris");

                    b.Navigation("ClientScopes");

                    b.Navigation("ClientSecrets");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.IdentityResource", b =>
                {
                    b.Navigation("IdentityResourceClaims");

                    b.Navigation("IdentityResourceProperties");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Kategorija", b =>
                {
                    b.Navigation("Kriterijs");

                    b.Navigation("Projekats");

                    b.Navigation("Sponzors");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Projekat", b =>
                {
                    b.Navigation("Rezultats");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Takmicenje", b =>
                {
                    b.Navigation("Agendums");

                    b.Navigation("Kategorijas");

                    b.Navigation("Tims");
                });

            modelBuilder.Entity("FITCCRS2.Services.Database.Tim", b =>
                {
                    b.Navigation("Projekats");
                });
#pragma warning restore 612, 618
        }
    }
}
